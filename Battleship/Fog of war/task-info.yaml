type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult exampleTest() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = main.execute("A1");
            if (!output.contains("hit") || !output.contains("ship")) {
                return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
            }

            matrix = getFieldMatrix(output);
            checkShot(matrix, "A1", output);

            String[] splittedOutput = output.split("ship");
            if (splittedOutput.length < 2) {
                return CheckResult.wrong("Two game fields were expected in the output.");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            findAllShips(matrix, new String[]{"A1 D1", "B9 D9", "F3 F7", "I2 J2", "J8 J10"});

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test1() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("B5 C5").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B5 C5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            String[] temp = output.split("starts");
            if (temp.length < 2) {
                return CheckResult.wrong("After printing \"The game starts!\" you should print an empty battle field!");
            }
            output = temp[1];

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("After the game starts you should print an empty battle field!");
            }

            output = main.execute("M1");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A11");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("E4");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("After missing a ship you should print \"You missed!\".");
            }

            String[] splittedOutput = output.split("missed");
            if (splittedOutput.length < 2) {
                return CheckResult.wrong("Two game field were expected in the output.");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkMissing(matrix, "E4", output);
            findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "B5 C5"});

            return CheckResult.correct();
        }


        @DynamicTestingMethod
        CheckResult test2() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("J3 J7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J3 J7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("C8 B8");
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Incorrect length of the ship)");
            }

            output = main.execute("C8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "C8 F8");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("A1 C2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("A1 C1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 C1");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("H1 H3").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H1 H3");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("G2 E2").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("E5 F5").trim();
            findShipByCoordinates(getFieldMatrix(output), "E5 F5");

            if (!output.contains("starts")) {
                return CheckResult.wrong("After entering the coordinates of all ships you should print:\n" +
                    "\"The game starts!\"");
            }

            output = main.execute("E8");
            checkShot(getFieldMatrix(output), "E8", output);

            if (!output.contains("hit") || !output.contains("ship")) {
                return CheckResult.wrong("After hitting a ship you should print \"You hit a ship!\".");
            }

            String[] splittedOutput = output.split("ship");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("Two game field were expected in the output. No one was found");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            findAllShips(matrix, new String[]{"J3 J7", "C8 F8", "A1 C1", "H1 H3", "E5 F5"});

            return CheckResult.correct();
        }


        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("hit")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a hit.\n" +
                        "You should print \"You hit a ship!\".");
            }

            if (output.toLowerCase().contains("missed")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You hit a ship!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("You should print \"X\" in " +
                    " coordinates where you hit the ship.");
            }
        }

        void checkMissing(String[][] matrix, String coordinate, String output) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!output.toLowerCase().contains("missed")) {
                throw new WrongAnswer(
                    "Your program reacted unpredictably to a miss.\n" +
                        "You should print \"You missed!\".");
            }

            if (output.toLowerCase().contains("hit")) {
                throw new WrongAnswer("Seems like your program prints " +
                    "both \"hit\" and \"missed\".\n" +
                    "You should print only \"You missed!\".");
            }

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m")) {
                throw new WrongAnswer("You should print \"M\" in " +
                    " coordinates where you missed.");
            }
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/BattleshipPlayer.java
  visible: true
  text: |
    package battleship;

    import battleship.Utils.PlaceShipResult;
    import battleship.Utils.ShotResult;

    public class BattleshipPlayer {

        private static final String UPPER_ROW = "  1 2 3 4 5 6 7 8 9 10\n";

        private final String[][] data;

        public BattleshipPlayer() {
            data = Utils.createInitialField();
        }

        public String render() {
            StringBuilder sb = new StringBuilder(UPPER_ROW);
            char letter = 'A';
            for (String[] row : data) {
                sb.append(letter++).append(' ');
                sb.append(String.join(" ", row));
                sb.append('\n');
            }
            sb.setLength(sb.length() - 1);
            return sb.toString();
        }

        public PlaceShipResult placeShip(int size, String rawCrd) {
            final int[][] crd = Utils.parseShipCoordinates(rawCrd);
            // Check if the coordinates are not 1 cell wide
            if (crd[0][0] != crd[1][0] && crd[0][1] != crd[1][1]) {
                return PlaceShipResult.WRONG_LOCATION;
            }

            Utils.sortShipCoordinates(crd);

            // Check if the ship length is the same as it needs to be
            if ((crd[1][0] - crd[0][0] + 1) * (crd[1][1] - crd[0][1] + 1) != size) {
                return PlaceShipResult.WRONG_LENGTH;
            }

            if (Utils.shipOverlapsWithAnother(data, crd)) {
                return PlaceShipResult.WRONG_LOCATION;
            }

            if (Utils.isShipTooCloseToAnother(data, crd)) {
                return PlaceShipResult.TOO_CLOSE;
            }

            Utils.placeShipIntoField(data, crd);
            return PlaceShipResult.NO_ERROR;
        }

        public ShotResult takeShot(String rawCrd) {
            final int[] crd = Utils.parseShotCoordinates(rawCrd);
            if (Utils.coordinatesNotInRange(crd)) {
                return ShotResult.WRONG_COORDINATES;
            }
            return Utils.shoot(data, crd);
        }

        @Override
        public String toString() {
            return render();
        }
    }
  learner_created: true
- name: src/battleship/Utils.java
  visible: true
  text: |
    package battleship;

    import java.util.*;

    public class Utils {

        public static final Map<String, Integer> SHIP_NAME_TO_SIZE_MAP = Collections.unmodifiableMap(
                new LinkedHashMap<>() {{
                    put("Aircraft Carrier", 5);
                    put("Battleship", 4);
                    put("Submarine", 3);
                    put("Cruiser", 3);
                    put("Destroyer", 2);
                }});

        private static final String FOG = "~";
        private static final String SHIP = "O";
        private static final String HIT = "X";
        private static final String MISS = "M";

        private static final int SIZE = 10;

        public enum PlaceShipResult {
            NO_ERROR, WRONG_LENGTH, WRONG_LOCATION, TOO_CLOSE
        }

        public enum ShotResult {
            HIT, MISSED, WRONG_COORDINATES
        }

        public static final Map<PlaceShipResult, String> PLACE_SHIP_RESULT_MAP = Map.of(
                PlaceShipResult.WRONG_LENGTH, "\nError! Wrong length of the %s! Try again:\n",
                PlaceShipResult.WRONG_LOCATION, "\nError! Wrong ship location! Try again:\n",
                PlaceShipResult.TOO_CLOSE, "\nError! You placed it too close to another one. Try again:\n"
        );

        public static final Map<ShotResult, String> SHOT_RESULT_MAP = Map.of(
                ShotResult.HIT, "\nYou hit a ship!\n",
                ShotResult.MISSED, "\nYou missed!\n",
                ShotResult.WRONG_COORDINATES, "\nError! You entered the wrong coordinates! Try again:\n"
        );

        public static String[][] createInitialField() {
            String[][] data = new String[SIZE][];
            data[0] = new String[SIZE];
            Arrays.fill(data[0], FOG);
            for (int i = 1; i < SIZE; i++) {
                data[i] = data[0].clone();
            }
            return data;
        }

        /** Parse coordinates and return them in the following format: [[row1, col1], [row2, col2]];
         * the coordinates are 0-based. */
        public static int[][] parseShipCoordinates(String rawCrd) {
            return Arrays.stream(rawCrd.split("\\s+"))
                    .map(Utils::parseCoordinates)
                    .toArray(int[][]::new);
        }

        public static int[] parseShotCoordinates(String rawCrd) {
            return parseCoordinates(rawCrd);
        }

        private static int[] parseCoordinates(String s) {
            return new int[]{s.charAt(0) - 'A', Integer.parseInt(s.substring(1)) - 1};
        }

        public static boolean coordinatesNotInRange(int[] crd) {
            return !Arrays.stream(crd).mapToObj(i -> i >= 0 && i < SIZE).allMatch(b -> b);
        }

        /** Sort coordinates in ascending order */
        public static void sortShipCoordinates(int[][] crd) {
            if (crd[0][0] > crd[1][0] || crd[0][1] > crd[1][1]) {
                int[] tmp = crd[0];
                crd[0] = crd[1];
                crd[1] = tmp;
            }
        }

        public static boolean shipOverlapsWithAnother(String[][] data, int[][] crd) {
            return Utils.symbolDetected(data, SHIP, crd[0][0], crd[1][0], crd[0][1], crd[1][1]);
        }

        public static boolean isShipTooCloseToAnother(final String[][] data, int[][] crd) {
            int rowLo = stickCrdToRange(crd[0][0] - 1);
            int rowHi = stickCrdToRange(crd[1][0] + 1);
            int colLo = stickCrdToRange(crd[0][1] - 1);
            int colHi = stickCrdToRange(crd[1][1] + 1);
            return Utils.symbolDetected(data, SHIP, rowLo, rowHi, colLo, colHi);
        }

        private static int stickCrdToRange(int i) {
            return i < 0 ? 0 : i >= SIZE ? SIZE - 1 : i;
        }

        public static boolean symbolDetected(final String[][] data, String symbol, int rowLo, int rowHi, int colLo, int colHi) {
            for (int y = rowLo; y <= rowHi; y++) {
                for (int x = colLo; x <= colHi; x++) {
                    if (symbol.equals(data[y][x])) {
                        return true;
                    }
                }
            }
            return false;
        }

        public static void placeShipIntoField(final String data[][], int[][] crd) {
            placeSymbolToRange(data, SHIP, crd[0][0], crd[1][0], crd[0][1], crd[1][1]);
        }

        public static void placeSymbolToRange(final String data[][], String symbol, int rowLo, int rowHi, int colLo, int colHi) {
            for (int y = rowLo; y <= rowHi; y++) {
                for (int x = colLo; x <= colHi; x++) {
                    data[y][x] = symbol;
                }
            }
        }

        public static ShotResult shoot(final String data[][], int[] crd) {
            if (data[crd[0]][crd[1]].equals(SHIP)) {
                data[crd[0]][crd[1]] = HIT;
                return ShotResult.HIT;
            }
            data[crd[0]][crd[1]] = MISS;
            return ShotResult.MISSED;
        }

    }
  learner_created: true
- name: src/battleship/BattleshipGame.java
  visible: true
  text: |
    package battleship;

    import battleship.Utils.PlaceShipResult;
    import battleship.Utils.ShotResult;

    import java.util.*;

    import static battleship.Utils.PLACE_SHIP_RESULT_MAP;
    import static battleship.Utils.SHOT_RESULT_MAP;
    import static battleship.Utils.SHIP_NAME_TO_SIZE_MAP;

    public class BattleshipGame {

        private static final Scanner scanner = new Scanner(System.in);

        private static final String ENTER_PROMPT = "\nEnter the coordinates of the %s (%d cells):\n\n";

        public BattleshipGame() {
            BattleshipPlayer player = new BattleshipPlayer();
            inputShipsForPlayer(player);
            System.out.println("\nThe game starts!\n");
            System.out.println(player);
            takeOneShot(player);
        }

        private static void inputShipsForPlayer(BattleshipPlayer player) {
            System.out.println(player);
            SHIP_NAME_TO_SIZE_MAP.forEach((name, size) -> {
                PlaceShipResult result;

                System.out.printf(ENTER_PROMPT, name, size);

                do {
                    result = player.placeShip(size, scanner.nextLine());
                    tryPrintShipPlacementError(result, name);
                } while (!result.equals(PlaceShipResult.NO_ERROR));

                System.out.println();
                System.out.println(player);
            });
        }

        private static void tryPrintShipPlacementError(PlaceShipResult placeShipResult, String shipName) {
            String error = getShipPlacementError(placeShipResult, shipName);
            if (!error.isEmpty()) {
                System.out.println(error);
            }
        }

        private static String getShipPlacementError(PlaceShipResult placeShipResult, String shipName) {
            switch (placeShipResult) {
                case WRONG_LENGTH: return String.format(PLACE_SHIP_RESULT_MAP.get(placeShipResult), shipName);
                case NO_ERROR:
                case WRONG_LOCATION:
                case TOO_CLOSE:
                default: return PLACE_SHIP_RESULT_MAP.getOrDefault(placeShipResult, "");
            }
        }

        private static void takeOneShot(BattleshipPlayer player) {
            System.out.println("\nTake a shot!\n");
            ShotResult result;

            do {
                result = player.takeShot(scanner.nextLine());
                if (!result.equals(ShotResult.WRONG_COORDINATES)) {
                    System.out.println("\n" + player);
                }
                System.out.println(SHOT_RESULT_MAP.get(result));

            } while (result.equals(ShotResult.WRONG_COORDINATES));
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/665/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 23 Apr 2021 23:20:24 UTC
record: 3
