type: edu
files:
- name: src/battleship/Main.java
  visible: true
  text: |
    package battleship;

    public class Main {

        public static void main(String[] args) {
            // Write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import org.hyperskill.hstest.dynamic.input.DynamicTestingMethod;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;


    public class Tests extends StageTest<String> {
        @DynamicTestingMethod
        CheckResult testExample() {

            TestedProgram main = new TestedProgram();
            String output = main.start().trim();
            String[][] matrix;

            if (!matrixIsEmpty(getFieldMatrix(output))) {
                return CheckResult.wrong("Not an empty game field at the start of the game");
            }

            // Filling the first player field
            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After starting the program, you should request " +
                    "the coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("F3 F7").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F7");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("A1 D1").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "A1 D1");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("J7 J10").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("J10 J8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "J10 J8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("B9 D8").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake.");
            }

            output = main.execute("B9 D9").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "B9 D9");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("E6 D6").trim();
            if (isGameFieldPrinted(output)) {
                return CheckResult.wrong("Your program should not print a game field if there is an input mistake. " +
                    "(Too close to another ship)");
            }

            output = main.execute("I2 J2").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "I2 J2");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("No offer found to give the move to another player");
            }

            output = main.execute("");

            // Filling the second player field

            if (!output.toLowerCase().contains("aircraft carrier")) {
                return CheckResult.wrong("After filling the first player field, you should request the second player's " +
                    "coordinates of the Aircraft Carrier in that way:\n" +
                    "\"Enter the coordinates of the Aircraft Carrier (5 cells):\"");
            }

            output = main.execute("H2 H6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H2 H6");

            if (!output.toLowerCase().contains("battleship")) {
                return CheckResult.wrong("After asking for the Aircraft Carrier coordinates, you should request " +
                    "the coordinates of the Battleship in that way:\n" +
                    "\"Enter the coordinates of the Battleship (4 cells):\"");
            }

            output = main.execute("F3 F6");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "F3 F6");

            if (!output.toLowerCase().contains("submarine")) {
                return CheckResult.wrong("After asking for the Battleship coordinates, you should request " +
                    "the coordinates of the Submarine in that way:\n" +
                    "\"Enter the coordinates of the Submarine (3 cells):\"");
            }

            output = main.execute("H8 F8").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "H8 F8");

            if (!output.toLowerCase().contains("cruiser")) {
                return CheckResult.wrong("After asking for the Submarine coordinates, you should request " +
                    "the coordinates of the Cruiser in that way:\n" +
                    "\"Enter the coordinates of the Cruiser (3 cells):\"");
            }

            output = main.execute("D4 D6").trim();
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D4 D6");

            if (!output.toLowerCase().contains("destroyer")) {
                return CheckResult.wrong("After asking for the Cruiser coordinates, you should request " +
                    "the coordinates of the Destroyer in that way:\n" +
                    "\"Enter the coordinates of the Destroyer (2 cells):\"");
            }

            output = main.execute("D8 C8");
            matrix = getFieldMatrix(output);
            findShipByCoordinates(matrix, "D8 C8");

            if (!output.toLowerCase().contains("enter")) {
                return CheckResult.wrong("no offer found to give the move to another player");
            }
            output = main.execute("");

            // Players' moves
            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"F3 F7", "A1 D1", "J10 J8", "B9 D9", "I2 J2"});

            output = main.execute("I3");
            if (!output.toLowerCase().contains("missed")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player missed");
            }

            output = main.execute("");
            checkMissing(getFieldMatrix(output), "I3");

            splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                return CheckResult.wrong("An incorrect number of game fields (2 should be)");
            }
            if (!matrixIsEmpty(getFieldMatrix(splittedOutput[0]))) {
                return CheckResult.wrong("At the start of the game the upper field should be empty");
            }
            findAllShips(getFieldMatrix(splittedOutput[1]),
                new String[]{"H2 H6", "F3 F6", "H8 F8", "D4 D6", "D8 C8"});

            output = main.execute("C9");
            if (!output.toLowerCase().contains("hit")) {
                return CheckResult.wrong("Incorrect reaction of the program if the player hit the ship");
            }
            main.execute("");

            makeMoveTillTheEnd(main);

            return CheckResult.correct();
        }

        void makeMoveTillTheEnd(TestedProgram main) {

            String[] secondPlayerMoves = {"A1", "B1", "C1", "D1", "B9", "C9", "D9", "F3", "F4", "F5", "F6", "F7", "I2", "J2", "J8", "J9", "J10"};
            String[] firstPlayerMoves = {"D4", "D5", "D6", "C8", "D8", "F3", "F4", "F5", "F6", "F7", "D10", "E10", "F10", "G10", "J1", "J2", "J3"};

            String[][] matrix;
            String output;
            int i;

            for (i = 0; i < 3; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");

            output = main.execute(secondPlayerMoves[i]);
            if (!output.contains("sank")) {
                throw new WrongAnswer("After a ship was sunk you should print \"You sank a ship!\" and ask to press Enter.");
            }
            output = main.execute("");

            String[] splittedOutput = output.split("---\n");
            if (splittedOutput.length != 2) {
                throw new WrongAnswer("An incorrect number of game fields.\nThere is should 2 fields separated by \"---------------------\"");
            }

            matrix = getFieldMatrix(splittedOutput[1]);
            checkShot(matrix, "A1");
            checkShot(matrix, "B1");
            checkShot(matrix, "C1");
            checkShot(matrix, "D1");

            for (i = i + 1; i < secondPlayerMoves.length - 1; i++) {
                main.execute(firstPlayerMoves[i]);
                main.execute("");
                main.execute(secondPlayerMoves[i]);
                main.execute("");
            }

            main.execute(firstPlayerMoves[i]);
            main.execute("");
            output = main.execute(secondPlayerMoves[i]).toLowerCase();

            if (!output.contains("won") || !output.contains("congratulations")) {
                throw new WrongAnswer("If a player has sunk all enemy ships you should print:\n" +
                    "\"You sank the last ship. You won. Congratulations!\"");
            }
        }

        void findShipByCoordinates(String[][] matrix, String coordinates) {
            int[] coordinatesInt = parseCoordinates(coordinates);

            if (coordinatesInt[0] > coordinatesInt[2]) {
                int swap = coordinatesInt[0];
                coordinatesInt[0] = coordinatesInt[2];
                coordinatesInt[2] = swap;
            } else if (coordinatesInt[1] > coordinatesInt[3]) {
                int swap = coordinatesInt[1];
                coordinatesInt[1] = coordinatesInt[3];
                coordinatesInt[3] = swap;
            }

            if (coordinatesInt[0] == coordinatesInt[2]) {
                int cord = coordinatesInt[0];
                for (int i = coordinatesInt[1]; i <= coordinatesInt[3]; i++) {
                    if (!matrix[cord][i].toLowerCase().equals("x") && !matrix[cord][i].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the coordinates \"" + coordinates + "\"");
                    }
                }
            } else {
                int cord = coordinatesInt[1];
                for (int i = coordinatesInt[0]; i <= coordinatesInt[2]; i++) {
                    if (!matrix[i][cord].toLowerCase().equals("x") && !matrix[i][cord].toLowerCase().equals("o")) {
                        throw new WrongAnswer("The ship's cells were not found at the \"" + coordinates + "\"");
                    }
                }
            }
        }

        boolean matrixIsEmpty(String[][] matrix) {
            for (String[] strings : matrix) {
                for (int j = 0; j < matrix.length; j++) {
                    if (!strings[j].trim().equals("~")) {
                        return false;
                    }
                }
            }
            return true;
        }

        void checkShot(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            if (!matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("x")) {
                throw new WrongAnswer("Expected hit in \"" + coordinate + "\".");
            }
        }

        boolean checkMissing(String[][] matrix, String coordinate) {
            int[] parsedCoordinate = new int[2];
            parsedCoordinate[0] = charToInt(coordinate.toLowerCase().substring(0, 1));
            parsedCoordinate[1] = Integer.parseInt(coordinate.substring(1)) - 1;

            return matrix[parsedCoordinate[0]][parsedCoordinate[1]].toLowerCase().contains("m");
        }

        int[] parseCoordinates(String coordinatesString) {
            String[] splittedCoords = coordinatesString.split(" ");
            int[] parsedCoordinates = new int[4];

            parsedCoordinates[0] = charToInt(splittedCoords[0].substring(0, 1));
            parsedCoordinates[1] = Integer.parseInt(splittedCoords[0].substring(1)) - 1;
            parsedCoordinates[2] = charToInt(splittedCoords[1].substring(0, 1));
            parsedCoordinates[3] = Integer.parseInt(splittedCoords[1].substring(1)) - 1;

            return parsedCoordinates;
        }

        int charToInt(String charCoordinate) {
            charCoordinate = charCoordinate.toLowerCase();
            char character = charCoordinate.charAt(0);
            return (int) character - (int) 'a';
        }

        String[][] getFieldMatrix(String output) {

            WrongAnswer cantParseException = new WrongAnswer("Can't parse the game field\n" +
                "Make sure you print it like in examples!");

            String[] splittedOutput = output.split("\n");
            String[][] matrix = new String[10][10];

            try {
                int index = 0;
                while (!(splittedOutput[index].contains("1") &&
                    splittedOutput[index].contains("2") &&
                    splittedOutput[index].contains("10"))) {
                    index++;
                    if (index > 1000) {
                        throw cantParseException;
                    }
                }
                index++;

                for (int i = 0; i < 10; i++) {
                    String temp = splittedOutput[index].substring(2).trim();
                    String[] splittedLine = temp.trim().split(" ");
                    if (splittedLine.length != 10) {
                        throw cantParseException;
                    }
                    matrix[i] = splittedLine;
                    index++;
                }
            } catch (IndexOutOfBoundsException ignored) {
                throw cantParseException;
            }

            return matrix;
        }

        boolean isGameFieldPrinted(String output) {
            return output.contains("1") && output.contains("2") && output.contains("10");
        }

        void findAllShips(String[][] matrix, String[] coordinates) {
            for (String item : coordinates) {
                findShipByCoordinates(matrix, item);
            }
        }
    }
  learner_created: false
- name: src/battleship/BattleshipPlayer.java
  visible: true
  text: |
    package battleship;

    import battleship.Utils.PlaceShipResult;
    import battleship.Utils.ShotResult;

    import java.util.ArrayList;
    import java.util.Collection;

    public class BattleshipPlayer {

        private static final String UPPER_ROW = "  1 2 3 4 5 6 7 8 9 10\n";

        private final String[][] data;
        private final String[][] rivalData;
        private final Collection<Ship> ships;

        public BattleshipPlayer() {
            data = Utils.createInitialField();
            rivalData = Utils.createInitialField();
            ships = new ArrayList<>();
        }

        public String renderSelf() {
            return render(data);
        }

        public String renderRival() {
            return render(rivalData);
        }

        private static String render(String[][] data) {
            StringBuilder sb = new StringBuilder(UPPER_ROW);
            char letter = 'A';
            for (String[] row : data) {
                sb.append(letter++).append(' ');
                sb.append(String.join(" ", row));
                sb.append('\n');
            }
            sb.setLength(sb.length() - 1);
            return sb.toString();
        }

        public PlaceShipResult placeShip(int size, String rawCrd) {
            final int[][] crd = Utils.parseShipCoordinates(rawCrd);
            // Check if the coordinates are not 1 cell wide
            if (crd[0][0] != crd[1][0] && crd[0][1] != crd[1][1]) {
                return PlaceShipResult.WRONG_LOCATION;
            }

            Utils.sortShipCoordinates(crd);

            // Check if the ship length is the same as it needs to be
            if ((crd[1][0] - crd[0][0] + 1) * (crd[1][1] - crd[0][1] + 1) != size) {
                return PlaceShipResult.WRONG_LENGTH;
            }

            if (Utils.shipOverlapsWithAnother(data, crd)) {
                return PlaceShipResult.WRONG_LOCATION;
            }

            if (Utils.isShipTooCloseToAnother(data, crd)) {
                return PlaceShipResult.TOO_CLOSE;
            }

            Utils.placeShipIntoField(data, crd);
            ships.add(new Ship(crd[0], crd[1]));

            return PlaceShipResult.NO_ERROR;
        }

        public ShotResult shoot(BattleshipPlayer player, String rawCrd) {
            final Shot shot = player.acceptShot(rawCrd);
            Utils.markRivalData(rivalData, shot.result, shot.crd);
            return shot.result;
        }

        public Shot acceptShot(String rawCrd) {
            final int[] crd = Utils.parseShotCoordinates(rawCrd);
            if (Utils.coordinatesNotInRange(crd)) {
                return new Shot(ShotResult.WRONG_COORDINATES, crd);
            }
            switch (Utils.shoot(data, crd)) {
                case Utils.HIT: return new Shot(ShotResult.HIT, crd);
                case Utils.SHIP: return new Shot(hitShip(crd), crd);
                default: return new Shot(ShotResult.MISSED, crd);
            }
        }

        private ShotResult hitShip(int[] crd) {
            final Ship shotShip = ships.stream().filter(ship -> ship.hit(crd)).findFirst().orElseThrow();
            if (!shotShip.sunken()) {
                return ShotResult.HIT;
            }
            ships.remove(shotShip);
            return !ships.isEmpty() ? ShotResult.SANK : ShotResult.SANK_LAST;
        }

        @Override
        public String toString() {
            return renderSelf();
        }

        public static class Shot {
            public final ShotResult result;
            public final int[] crd;

            public Shot(ShotResult result, int[] crd) {
                this.result = result;
                this.crd = crd;
            }
        }

    }
  learner_created: true
- name: src/battleship/Utils.java
  visible: true
  text: |
    package battleship;

    import java.util.*;

    public class Utils {

        public static final Map<String, Integer> SHIP_NAME_TO_SIZE_MAP = Collections.unmodifiableMap(
                new LinkedHashMap<>() {{
                    put("Aircraft Carrier", 5);
                    put("Battleship", 4);
                    put("Submarine", 3);
                    put("Cruiser", 3);
                    put("Destroyer", 2);
                }});

        public static final String FOG = "~";
        public static final String SHIP = "O";
        public static final String HIT = "X";
        public static final String MISS = "M";

        private static final int SIZE = 10;

        public enum PlaceShipResult {
            NO_ERROR, WRONG_LENGTH, WRONG_LOCATION, TOO_CLOSE
        }

        public enum ShotResult {
            HIT, SANK, SANK_LAST, MISSED, WRONG_COORDINATES
        }

        public static final Map<PlaceShipResult, String> PLACE_SHIP_RESULT_MAP = Map.of(
                PlaceShipResult.WRONG_LENGTH, "\nError! Wrong length of the %s! Try again:\n",
                PlaceShipResult.WRONG_LOCATION, "\nError! Wrong ship location! Try again:\n",
                PlaceShipResult.TOO_CLOSE, "\nError! You placed it too close to another one. Try again:\n"
        );

        public static final Map<ShotResult, String> SHOT_MESSAGE_MAP = Map.of(
                ShotResult.HIT, "\nYou hit a ship! Try again:\n",
                ShotResult.MISSED, "\nYou missed. Try again:\n",
                ShotResult.SANK, "\nYou sank a ship! Specify a new target:\n",
                ShotResult.SANK_LAST, "\nYou sank the last ship. You won. Congratulations!",
                ShotResult.WRONG_COORDINATES, "\nError! You entered the wrong coordinates! Try again:\n"
        );

        public static final Map<ShotResult, String> RIVAL_DATA_MARK_MAP = Map.of(
                ShotResult.HIT, HIT,
                ShotResult.SANK, HIT,
                ShotResult.SANK_LAST, HIT,
                ShotResult.MISSED, MISS
        );

        public static String[][] createInitialField() {
            String[][] data = new String[SIZE][];
            data[0] = new String[SIZE];
            Arrays.fill(data[0], FOG);
            for (int i = 1; i < SIZE; i++) {
                data[i] = data[0].clone();
            }
            return data;
        }

        /** Parse coordinates and return them in the following format: [[row1, col1], [row2, col2]];
         * the coordinates are 0-based. */
        public static int[][] parseShipCoordinates(String rawCrd) {
            return Arrays.stream(rawCrd.split("\\s+"))
                    .map(Utils::parseCoordinates)
                    .toArray(int[][]::new);
        }

        public static int[] parseShotCoordinates(String rawCrd) {
            return parseCoordinates(rawCrd);
        }

        private static int[] parseCoordinates(String s) {
            return new int[]{s.charAt(0) - 'A', Integer.parseInt(s.substring(1)) - 1};
        }

        public static boolean coordinatesNotInRange(int[] crd) {
            return !Arrays.stream(crd).mapToObj(i -> i >= 0 && i < SIZE).allMatch(b -> b);
        }

        /** Sort coordinates in ascending order */
        public static void sortShipCoordinates(int[][] crd) {
            if (crd[0][0] > crd[1][0] || crd[0][1] > crd[1][1]) {
                int[] tmp = crd[0];
                crd[0] = crd[1];
                crd[1] = tmp;
            }
        }

        public static boolean shipOverlapsWithAnother(String[][] data, int[][] crd) {
            return Utils.symbolDetected(data, SHIP, crd[0][0], crd[1][0], crd[0][1], crd[1][1]);
        }

        public static boolean isShipTooCloseToAnother(final String[][] data, int[][] crd) {
            int rowLo = stickCrdToRange(crd[0][0] - 1);
            int rowHi = stickCrdToRange(crd[1][0] + 1);
            int colLo = stickCrdToRange(crd[0][1] - 1);
            int colHi = stickCrdToRange(crd[1][1] + 1);
            return Utils.symbolDetected(data, SHIP, rowLo, rowHi, colLo, colHi);
        }

        private static int stickCrdToRange(int i) {
            return i < 0 ? 0 : i >= SIZE ? SIZE - 1 : i;
        }

        public static boolean symbolDetected(final String[][] data, String symbol, int rowLo, int rowHi, int colLo, int colHi) {
            for (int y = rowLo; y <= rowHi; y++) {
                for (int x = colLo; x <= colHi; x++) {
                    if (symbol.equals(data[y][x])) {
                        return true;
                    }
                }
            }
            return false;
        }

        public static void placeShipIntoField(final String[][] data, int[][] crd) {
            placeSymbolToRange(data, SHIP, crd[0][0], crd[1][0], crd[0][1], crd[1][1]);
        }

        public static void placeSymbolToRange(final String[][] data, String symbol, int rowLo, int rowHi, int colLo, int colHi) {
            for (int y = rowLo; y <= rowHi; y++) {
                for (int x = colLo; x <= colHi; x++) {
                    data[y][x] = symbol;
                }
            }
        }

        public static void markRivalData(final String[][] rivalData, ShotResult result, int[] crd) {
            final String mark = RIVAL_DATA_MARK_MAP.getOrDefault(result, "");
            if (!mark.isEmpty()) {
                rivalData[crd[0]][crd[1]] = mark;
            }
        }

        public static String shoot(final String[][] data, int[] crd) {
            final String symbol = data[crd[0]][crd[1]];
            data[crd[0]][crd[1]] = symbol.equals(SHIP) || symbol.equals(HIT) ? HIT : MISS;
            return symbol;
        }

    }
  learner_created: true
- name: src/battleship/BattleshipGame.java
  visible: true
  text: |
    package battleship;

    import battleship.Utils.PlaceShipResult;
    import battleship.Utils.ShotResult;

    import java.util.*;

    import static battleship.Utils.*;

    public class BattleshipGame {

        private static final Scanner scanner = new Scanner(System.in);

        private static final String ENTER_PROMPT = "\nEnter the coordinates of the %s (%d cells):\n\n";

        public BattleshipGame() {
            BattleshipPlayer player1 = new BattleshipPlayer();
            BattleshipPlayer player2 = new BattleshipPlayer();
            inputShipsForPlayer(player1);

            System.out.println("\nThe game starts!\n");
            System.out.println(player2.renderRival());
            System.out.println("\nTake a shot!\n");

            sinkAPlayer(player1, player2);
        }

        private static void inputShipsForPlayer(BattleshipPlayer player) {
            System.out.println(player);
            SHIP_NAME_TO_SIZE_MAP.forEach((name, size) -> {
                PlaceShipResult result;

                System.out.printf(ENTER_PROMPT, name, size);

                do {
                    result = player.placeShip(size, scanner.nextLine());
                    tryPrintShipPlacementError(result, name);
                } while (!result.equals(PlaceShipResult.NO_ERROR));

                System.out.println();
                System.out.println(player);
            });
        }

        private static void tryPrintShipPlacementError(PlaceShipResult placeShipResult, String shipName) {
            String error = getShipPlacementError(placeShipResult, shipName);
            if (!error.isEmpty()) {
                System.out.println(error);
            }
        }

        private static String getShipPlacementError(PlaceShipResult placeShipResult, String shipName) {
            switch (placeShipResult) {
                case WRONG_LENGTH: return String.format(PLACE_SHIP_RESULT_MAP.get(placeShipResult), shipName);
                case NO_ERROR:
                case WRONG_LOCATION:
                case TOO_CLOSE:
                default: return PLACE_SHIP_RESULT_MAP.getOrDefault(placeShipResult, "");
            }
        }

        private static void sinkAPlayer(BattleshipPlayer goner, BattleshipPlayer butcher) {
            ShotResult shotResult = ShotResult.MISSED;
            while (!shotResult.equals(ShotResult.SANK_LAST)) {
                shotResult = takeOneShot(goner, butcher);
            }
        }

        private static ShotResult takeOneShot(BattleshipPlayer shotPlayer, BattleshipPlayer shooterPlayer) {
            ShotResult shotResult;

            do {
                shotResult = shooterPlayer.shoot(shotPlayer, scanner.nextLine());
                final String shotMsg = SHOT_MESSAGE_MAP.get(shotResult);
                if (shotResult.equals(ShotResult.WRONG_COORDINATES)) {
                    System.out.println(shotMsg);
                } else {
                    System.out.println("\n" + shooterPlayer.renderRival());
                    System.out.println(shotMsg);
                }

            } while (shotResult.equals(ShotResult.WRONG_COORDINATES));

            return shotResult;
        }
    }
  learner_created: true
- name: src/battleship/Ship.java
  visible: true
  text: |
    package battleship;

    import java.util.*;

    public class Ship {
        private final Set<Integer> hitPoints;

        public Ship(int[] topLeftCrd, int[] btmRightCrd) {
            hitPoints = new HashSet<>();
            for (int y = topLeftCrd[0]; y <= btmRightCrd[0]; y++) {
                for (int x = topLeftCrd[1]; x <= btmRightCrd[1]; x++) {
                    hitPoints.add(crdToHash(y, x));
                }
            }
        }

        public boolean hit(int[] crd) {
            return hitPoints.remove(crdToHash(crd[0], crd[1]));
        }

        public boolean sunken() {
            return hitPoints.isEmpty();
        }

        private int crdToHash(int y, int x) {
            return (y + 1) * 100 + x + 1;
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/125/stages/667/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 26 Apr 2021 00:34:26 UTC
record: -1
